import logging

from aiogram import types, F, Router
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext

from app.keyboards import builders
from app.services import api
from app.texts import texts


logger = logging.getLogger(__name__)
edit_student_router = Router()


@edit_student_router.callback_query(F.data.startswith('edit_student_'))
async def edit_student(call: types.CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞.
    –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–µ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""

    student_id = int(call.data.split('_')[-1])

    data = await state.get_data()
    students: list[dict] = data.get('students', [])

    student = next((s for s in students if s['id'] == student_id), None)
    if student is None:
        await call.answer('–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', show_alert=True)
        return
    await state.update_data(selected_student=student)
    text = (
        f"üÜî {student['id']}\n"
        f"üë§ {student['last_name']} {student['first_name']}\n"
        f"üéÇ {student['birth_date']}\n"
        f"üìö –°—Ç–∞—Ç—É—Å: {student['status']}\n"
        f"‚úâÔ∏è  {student.get('email', '‚Äî')}\n"
        f"üìà GPA: {student['gpa']}"
    )

    await call.message.edit_text(
        text,
        reply_markup=builders.student_edit_kb()
    )


@edit_student_router.callback_query(F.data == 'patch_student')
async def _(call: types.CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞.
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ ID.
    –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–µ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    data = await state.get_data()
    student = data.get('selected_student')
    await call.message.edit_text(
        texts.editing_student_msg.format(
            last_name=student['last_name'],
            first_name=student['first_name']
        ),
        reply_markup=builders.patch_student_kb()
    )


@edit_student_router.callback_query(F.data.startswith('patch-student-'))
async def _(call: types.CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞.
    –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç state 'editing_student_setting_value'."""
    field = call.data.split('-')[-1]
    await state.update_data(editing_student_field=field)
    await call.message.edit_text(
        texts.editing_student_field_msg.format(field=field),
        reply_markup=None
    )
    await state.set_state('editing_student_setting_value')


@edit_student_router.message(StateFilter('editing_student_setting_value'))
async def _(message: types.Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞.
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –≤ —Å–ª–æ–≤–∞—Ä–µ student –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API.
    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç FSMContext –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏."""

    new_value = message.text
    data = await state.get_data()
    field = data.get('editing_student_field')
    student = data.get('selected_student')

    student[field] = new_value
    student_id = student.pop('id')

    try:
        await api.edit_student(student_id, student)
        await message.answer(
            texts.succesfull_edit_msg.format(id=student_id),
            reply_markup=builders.main_menu_kb()
        )

    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞: {e}')
        await message.answer(
            texts.error_msg,
            reply_markup=builders.main_menu_kb()
        )

    await state.clear()


@edit_student_router.callback_query(F.data == 'delete_student')
async def _(call: types.CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞.
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API."""

    data = await state.get_data()
    student = data.get('selected_student')
    student_id = student.pop('id')

    try:
        await api.delete_student(student_id)
        await call.message.edit_text(
            texts.succesfull_delete_msg.format(id=student_id),
            reply_markup=builders.main_menu_kb()
        )

    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞: {e}')
        await call.message.edit_text(
            texts.error_msg,
            reply_markup=builders.main_menu_kb()
        )

    await state.clear()
